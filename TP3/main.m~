%load gatlin2;
X = double(imread('lenna.gif'));
% X = X/max(max(X));
[gx,gy]=grad_im2(X);
figure(1);
imshow(X,[]);
title('im');
colorbar;

figure(2);
imshow([gx,gy],[]);
title('grad');

d = div_champ2(gx,gy);
figure(3);
imshow([X,d],[]);
title('im & laplacien');

%F = imnoise(X,'gaussian',0,0.001);
F = X + 10*randn(size(X));
figure(4);
imshow(F,[]);
colorbar;

gradF = @(f,u,l) 2*(u-f)-2*l*laplacien_im2(u);
u=zeros(size(F));
lambda = 10;
for i=1:100
    g = gradF(F,u,lambda);
    u=u-0.1*g;
end
imshow([F,u],[]);
%%
rng(123);
load gatlin2;
%X = double(imread('lenna.gif'));
%X = double(sum(imread('len_top.jpg'),3))/3;
F = X + 10*randn(size(X));
S = fsym(F);
[M,N]=size(S);
% imshow(S,[]);
lambda = 100;

FS = fft2(S);

figure(5);
imshow(fftshift(angle(FS)),[-pi,pi]);
colormap(gca,hsv);
colorbar;
title('angle of Fourier of sym image')

%[p,q]=meshgrid([0:N/2 -N/2+1:-1], [0:M/2 -M/2+1:-1]);
[p,q]=meshgrid(0:N-1, 0:M-1);
Fu = FS./(1+4*lambda*(sin(pi*p/N).^2 + sin(pi*q/M).^2));
u = ifft2(Fu);


figure(6);
imshow(angle(u),[-pi,pi]);
colormap(gca,hsv);
colorbar;
title('angle of u')

u = real(unsym(u));
figure(7);
imshow([X,F,u],[]);
title('original, noisy, and recovered images');

%%
phi = @(t) t;
dphi = @(t) 1;


